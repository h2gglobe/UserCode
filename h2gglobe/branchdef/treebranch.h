      outputTree->Branch("event",&loops->event, "event/I"); 
      outputTree->Branch("run",&loops->run, "run/I"); 
      outputTree->Branch("process_id",&loops->process_id, "process_id/I"); 
      outputTree->Branch("lumis",&loops->lumis, "lumis/I"); 
      outputTree->Branch("bx",&loops->bx, "bx/I"); 
      outputTree->Branch("pthat",&loops->pthat, "pthat/F"); 
      outputTree->Branch("weight",&loops->weight, "weight/F"); 
      outputTree->Branch("ct_n",&loops->ct_n, "ct_n/I"); 
      outputTree->Branch("ct_p4", "TClonesArray",&loops->ct_p4, 32000, 0);
      outputTree->Branch("ct_emEnergy",&loops->ct_emEnergy, "ct_emEnergy[ct_n]/F"); 
      outputTree->Branch("ct_hadEnergy",&loops->ct_hadEnergy, "ct_hadEnergy[ct_n]/F"); 
      outputTree->Branch("ct_outerEnergy",&loops->ct_outerEnergy, "ct_outerEnergy[ct_n]/F"); 
      outputTree->Branch("ct_emL1",&loops->ct_emL1, "ct_emL1[ct_n]/I"); 
      outputTree->Branch("ct_hadL1",&loops->ct_hadL1, "ct_hadL1[ct_n]/I"); 
      outputTree->Branch("ct_size",&loops->ct_size, "ct_size[ct_n]/I"); 
      outputTree->Branch("sc_islbar_n",&loops->sc_islbar_n, "sc_islbar_n/I"); 
      outputTree->Branch("sc_islbar_p4", "TClonesArray",&loops->sc_islbar_p4, 32000, 0);
      outputTree->Branch("sc_islbar_xyz", "TClonesArray",&loops->sc_islbar_xyz, 32000, 0);
      outputTree->Branch("sc_islbar_raw",&loops->sc_islbar_raw, "sc_islbar_raw[sc_islbar_n]/F"); 
      outputTree->Branch("sc_islbar_nbc",&loops->sc_islbar_nbc, "sc_islbar_nbc[sc_islbar_n]/I"); 
      outputTree->Branch("sc_islbar_seedenergy",&loops->sc_islbar_seedenergy,"sc_islbar_seedenergy[sc_islbar_n]/F" ); 
      outputTree->Branch("sc_islbar_bcseedind",&loops->sc_islbar_bcseedind, "sc_islbar_bcseedind[sc_islbar_n]/I"); 
      outputTree->Branch("sc_islbar_bcind",&loops->sc_islbar_bcind, "sc_islbar_bcind[sc_islbar_n][35]/I"); 
      outputTree->Branch("sc_n",&loops->sc_n, "sc_n/I"); 
      outputTree->Branch("sc_islend_n",&loops->sc_islend_n, "sc_islend_n/I"); 
      outputTree->Branch("sc_hybrid_n",&loops->sc_hybrid_n, "sc_hybrid_n/I"); 
      outputTree->Branch("sc_p4", "TClonesArray",&loops->sc_p4, 32000, 0);
      outputTree->Branch("sc_xyz", "TClonesArray",&loops->sc_xyz, 32000, 0);
      outputTree->Branch("sc_pre",&loops->sc_pre, "sc_pre[sc_n]/F"); 
      outputTree->Branch("sc_raw",&loops->sc_raw, "sc_raw[sc_n]/F"); 
      outputTree->Branch("sc_barrel",&loops->sc_barrel, "sc_barrel[sc_n]/I"); 
      outputTree->Branch("sc_2xN",&loops->sc_2xN, "sc_2xN[sc_n]/F"); 
      outputTree->Branch("sc_5xN",&loops->sc_5xN, "sc_5xN[sc_n]/F"); 
      outputTree->Branch("sc_sieie",&loops->sc_sieie, "sc_sieie[sc_n]/F"); 
      outputTree->Branch("sc_nbc",&loops->sc_nbc, "sc_nbc[sc_n]/I"); 
      outputTree->Branch("sc_bcseedind",&loops->sc_bcseedind, "sc_bcseedind[sc_n]/I"); 
      outputTree->Branch("sc_bcind",&loops->sc_bcind, "sc_bcind[sc_n][35]/I"); 
      outputTree->Branch("bc_n",&loops->bc_n, "bc_n/I"); 
      outputTree->Branch("bc_islbar_n",&loops->bc_islbar_n, "bc_islbar_n/I"); 
      outputTree->Branch("bc_islend_n",&loops->bc_islend_n, "bc_islend_n/I"); 
      outputTree->Branch("bc_hybrid_n",&loops->bc_hybrid_n, "bc_hybrid_n/I"); 
      outputTree->Branch("bc_p4", "TClonesArray",&loops->bc_p4, 32000, 0);
      outputTree->Branch("bc_xyz", "TClonesArray",&loops->bc_xyz, 32000, 0);
      outputTree->Branch("bc_nhits",&loops->bc_nhits,"bc_nhits[bc_n]/I"); 
      outputTree->Branch("bc_s1",&loops->bc_s1, "bc_s1[bc_n]/F"); 
      outputTree->Branch("bc_rook",&loops->bc_rook, "bc_rook[bc_n]/F"); 
      outputTree->Branch("bc_chx",&loops->bc_chx, "bc_chx[bc_n]/F"); 
      outputTree->Branch("bc_s4",&loops->bc_s4, "bc_s4[bc_n]/F"); 
      outputTree->Branch("bc_s9",&loops->bc_s9, "bc_s9[bc_n]/F"); 
      outputTree->Branch("bc_s25",&loops->bc_s25, "bc_s25[bc_n]/F"); 
      outputTree->Branch("bc_spp",&loops->bc_spp, "bc_spp[bc_n]/F"); 
      outputTree->Branch("bc_see",&loops->bc_see, "bc_see[bc_n]/F"); 
      outputTree->Branch("bc_sep",&loops->bc_sep, "bc_sep[bc_n]/F"); 
      outputTree->Branch("bc_type",&loops->bc_type, "bc_type[bc_n]/I"); 
      outputTree->Branch("bc_sieie",&loops->bc_sieie, "bc_sieie[bc_n]/F"); 
      outputTree->Branch("bc_seed",&loops->bc_seed, "bc_seed[bc_n]/I"); 
      outputTree->Branch("ecalhit_n",&loops->ecalhit_n, "ecalhit_n/I"); 
      outputTree->Branch("ecalhit_type",&loops->ecalhit_type, "ecalhit_type[ecalhit_n]/I"); 
      outputTree->Branch("ecalhit_flag",&loops->ecalhit_flag, "ecalhit_flag[ecalhit_n]/I"); 
      outputTree->Branch("ecalhit_time",&loops->ecalhit_time, "ecalhit_time[ecalhit_n]/F"); 
      outputTree->Branch("ecalhit_detid",&loops->ecalhit_detid, "ecalhit_detid[ecalhit_n]/I"); 
      outputTree->Branch("ecalhit_p4", "TClonesArray",&loops->ecalhit_p4, 32000, 0);
    outputTree->Branch("el_std_n",&loops->el_std_n, "el_std_n/I");
outputTree->Branch("el_std_sc", "TClonesArray",&loops->el_std_sc, 32000, 0);
outputTree->Branch("el_std_p4", "TClonesArray",&loops->el_std_p4, 32000, 0);
outputTree->Branch("el_std_momvtx", "TClonesArray",&loops->el_std_momvtx, 32000, 0);
outputTree->Branch("el_std_momvtxconst", "TClonesArray",&loops->el_std_momvtxconst, 32000, 0);
outputTree->Branch("el_std_momcalo", "TClonesArray",&loops->el_std_momcalo, 32000, 0);
outputTree->Branch("el_std_momout", "TClonesArray",&loops->el_std_momout, 32000, 0);
outputTree->Branch("el_std_posvtx", "TClonesArray",&loops->el_std_posvtx, 32000, 0);
outputTree->Branch("el_std_poscalo", "TClonesArray",&loops->el_std_poscalo, 32000, 0);
    outputTree->Branch("el_std_eopin",&loops->el_std_eopin, "el_std_eopin[el_std_n]/F");
    outputTree->Branch("el_std_eseedopout",&loops->el_std_eseedopout, "el_std_eseedopout[el_std_n]/F");
    outputTree->Branch("el_std_pout",&loops->el_std_pout, "el_std_pout[el_std_n]/F");
    outputTree->Branch("el_std_pin",&loops->el_std_pin, "el_std_pin[el_std_n]/F");
    outputTree->Branch("el_std_e1x5",&loops->el_std_e1x5, "el_std_e1x5[el_std_n]/F");
    outputTree->Branch("el_std_e5x5",&loops->el_std_e5x5, "el_std_e5x5[el_std_n]/F");
    outputTree->Branch("el_std_e2x5",&loops->el_std_e2x5, "el_std_e2x5[el_std_n]/F");
    outputTree->Branch("el_std_spp",&loops->el_std_spp, "el_std_spp[el_std_n]/F");
    outputTree->Branch("el_std_see",&loops->el_std_see, "el_std_see[el_std_n]/F");
    outputTree->Branch("el_std_sieie",&loops->el_std_sieie, "el_std_sieie[el_std_n]/F");
    outputTree->Branch("el_std_sieiesc",&loops->el_std_sieiesc, "el_std_sieiesc[el_std_n]/F");
    outputTree->Branch("el_std_eseed",&loops->el_std_eseed, "el_std_eseed[el_std_n]/F");
    outputTree->Branch("el_std_enearbcopin",&loops->el_std_enearbcopin, "el_std_enearbcopin[el_std_n]/F");
    outputTree->Branch("el_std_eseedopin",&loops->el_std_eseedopin, "el_std_eseedopin[el_std_n]/F");
    outputTree->Branch("el_std_fbrem",&loops->el_std_fbrem, "el_std_fbrem[el_std_n]/F");
    outputTree->Branch("el_std_nbrem",&loops->el_std_nbrem, "el_std_nbrem[el_std_n]/I");
    outputTree->Branch("el_std_hoe",&loops->el_std_hoe, "el_std_hoe[el_std_n]/F");
    outputTree->Branch("el_std_hoed1",&loops->el_std_hoed1, "el_std_hoed1[el_std_n]/F");
    outputTree->Branch("el_std_hoed2",&loops->el_std_hoed2, "el_std_hoed2[el_std_n]/F");
    outputTree->Branch("el_std_detain",&loops->el_std_detain, "el_std_detain[el_std_n]/F");
    outputTree->Branch("el_std_dphiin",&loops->el_std_dphiin, "el_std_dphiin[el_std_n]/F");
    outputTree->Branch("el_std_detaout",&loops->el_std_detaout, "el_std_detaout[el_std_n]/F");
    outputTree->Branch("el_std_dphiout",&loops->el_std_dphiout, "el_std_dphiout[el_std_n]/F");
    outputTree->Branch("el_std_class",&loops->el_std_class, "el_std_class[el_std_n]/I");
    outputTree->Branch("el_std_crack",&loops->el_std_crack, "el_std_crack[el_std_n]/I");
    outputTree->Branch("el_std_nambtk",&loops->el_std_nambtk, "el_std_nambtk[el_std_n]/I");
    outputTree->Branch("el_std_scind",&loops->el_std_scind, "el_std_scind[el_std_n]/I");
    outputTree->Branch("el_std_z0",&loops->el_std_z0, "el_std_z0[el_std_n]/F");
    outputTree->Branch("el_std_d0",&loops->el_std_d0, "el_std_d0[el_std_n]/F");
    outputTree->Branch("el_std_qoverperr",&loops->el_std_qoverperr, "el_std_qoverperr[el_std_n]/F");
    outputTree->Branch("el_std_pterr",&loops->el_std_pterr, "el_std_pterr[el_std_n]/F");
    outputTree->Branch("el_std_etaerr",&loops->el_std_etaerr, "el_std_etaerr[el_std_n]/F");
    outputTree->Branch("el_std_phierr",&loops->el_std_phierr, "el_std_phierr[el_std_n]/F");
    outputTree->Branch("el_std_z0err",&loops->el_std_z0err, "el_std_z0err[el_std_n]/F");
    outputTree->Branch("el_std_d0err",&loops->el_std_d0err, "el_std_d0err[el_std_n]/F");
    outputTree->Branch("el_std_chi2",&loops->el_std_chi2, "el_std_chi2[el_std_n]/F");
    outputTree->Branch("el_std_dof",&loops->el_std_dof, "el_std_dof[el_std_n]/F");
    outputTree->Branch("el_std_mva",&loops->el_std_mva, "el_std_mva[el_std_n]/F");
    outputTree->Branch("el_std_ch_gsf",&loops->el_std_ch_gsf, "el_std_ch_gsf[el_std_n]/I");
    outputTree->Branch("el_std_ch_scpix",&loops->el_std_ch_scpix, "el_std_ch_scpix[el_std_n]/I");
    outputTree->Branch("el_std_charge",&loops->el_std_charge, "el_std_charge[el_std_n]/I");
    outputTree->Branch("el_std_losthits",&loops->el_std_losthits, "el_std_losthits[el_std_n]/I");
    outputTree->Branch("el_std_validhits",&loops->el_std_validhits, "el_std_validhits[el_std_n]/I");
    outputTree->Branch("el_std_hp_expin",&loops->el_std_hp_expin, "el_std_hp_expin[el_std_n]/I");
    outputTree->Branch("el_std_hp_expout",&loops->el_std_hp_expout, "el_std_hp_expout[el_std_n]/I");
    outputTree->Branch("el_std_rohighe",&loops->el_std_rohighe, "el_std_rohighe[el_std_n]/I");
    outputTree->Branch("el_std_roloose",&loops->el_std_roloose, "el_std_roloose[el_std_n]/I");
    outputTree->Branch("el_std_rotight",&loops->el_std_rotight, "el_std_rotight[el_std_n]/I");
    outputTree->Branch("el_std_loose",&loops->el_std_loose, "el_std_loose[el_std_n]/I");
    outputTree->Branch("el_std_tight",&loops->el_std_tight, "el_std_tight[el_std_n]/I");
   outputTree->Branch("el_std_catbased", "std::vector<std::vector<int> >", &loops->el_std_catbased);
    outputTree->Branch("el_std_tkind",&loops->el_std_tkind, "el_std_tkind[el_std_n]/I");
    outputTree->Branch("el_std_hcaliso03",&loops->el_std_hcaliso03, "el_std_hcaliso03[el_std_n]/F");
    outputTree->Branch("el_std_ecaliso03",&loops->el_std_ecaliso03, "el_std_ecaliso03[el_std_n]/F");
    outputTree->Branch("el_std_tkiso03",&loops->el_std_tkiso03, "el_std_tkiso03[el_std_n]/F");
    outputTree->Branch("el_std_hcaliso04",&loops->el_std_hcaliso04, "el_std_hcaliso04[el_std_n]/F");
    outputTree->Branch("el_std_ecaliso04",&loops->el_std_ecaliso04, "el_std_ecaliso04[el_std_n]/F");
    outputTree->Branch("el_std_tkiso04",&loops->el_std_tkiso04, "el_std_tkiso04[el_std_n]/F");
    outputTree->Branch("el_std_tkdrv",&loops->el_std_tkdrv, "el_std_tkdrv[el_std_n]/O");
    outputTree->Branch("el_std_ecaldrv",&loops->el_std_ecaldrv, "el_std_ecaldrv[el_std_n]/O");
    outputTree->Branch("el_std_ip_ctf",&loops->el_std_ip_ctf, "el_std_ip_ctf[el_std_n]/F");
    outputTree->Branch("el_std_ip_gsf",&loops->el_std_ip_gsf, "el_std_ip_gsf[el_std_n]/F");
    outputTree->Branch("el_std_dist",&loops->el_std_dist, "el_std_dist[el_std_n]/F");
    outputTree->Branch("el_std_dcot",&loops->el_std_dcot, "el_std_dcot[el_std_n]/F");
    outputTree->Branch("el_std_hp_1pxb",&loops->el_std_1pxb, "el_std_hp_1pxb[el_std_n]/I");
    outputTree->Branch("el_std_hp_1pxf",&loops->el_std_1pxf, "el_std_hp_1pxf[el_std_n]/I");
      outputTree->Branch("gen_n",&loops->gen_n, "gen_n/I"); 
      outputTree->Branch("gen_p4", "TClonesArray",&loops->gen_p4, 32000, 0);
      outputTree->Branch("gen_status",&loops->gen_status, "gen_status[gen_n]/I"); 
      outputTree->Branch("gen_pdgid",&loops->gen_pdgid, "gen_pdgid[gen_n]/I"); 
      outputTree->Branch("gen_mother",&loops->gen_mother, "gen_mother[gen_n]/I"); 
    outputTree->Branch("genjet_algo1_n",&loops->genjet_algo1_n, "genjet_algo1_n/I");
outputTree->Branch("genjet_algo1_p4", "TClonesArray",&loops->genjet_algo1_p4, 32000, 0);
    outputTree->Branch("genjet_algo1_em",&loops->genjet_algo1_em, "genjet_algo1_em[genjet_algo1_n]/F");
    outputTree->Branch("genjet_algo1_had",&loops->genjet_algo1_had, "genjet_algo1_had[genjet_algo1_n]/F");
    outputTree->Branch("genjet_algo1_inv",&loops->genjet_algo1_inv, "genjet_algo1_inv[genjet_algo1_n]/F");
    outputTree->Branch("genjet_algo1_aux",&loops->genjet_algo1_aux, "genjet_algo1_aux[genjet_algo1_n]/F");
    outputTree->Branch("genjet_algo2_n",&loops->genjet_algo2_n, "genjet_algo2_n/I");
outputTree->Branch("genjet_algo2_p4", "TClonesArray",&loops->genjet_algo2_p4, 32000, 0);
    outputTree->Branch("genjet_algo2_em",&loops->genjet_algo2_em, "genjet_algo2_em[genjet_algo2_n]/F");
    outputTree->Branch("genjet_algo2_had",&loops->genjet_algo2_had, "genjet_algo2_had[genjet_algo2_n]/F");
    outputTree->Branch("genjet_algo2_inv",&loops->genjet_algo2_inv, "genjet_algo2_inv[genjet_algo2_n]/F");
    outputTree->Branch("genjet_algo2_aux",&loops->genjet_algo2_aux, "genjet_algo2_aux[genjet_algo2_n]/F");
    outputTree->Branch("genjet_algo3_n",&loops->genjet_algo3_n, "genjet_algo3_n/I");
outputTree->Branch("genjet_algo3_p4", "TClonesArray",&loops->genjet_algo3_p4, 32000, 0);
    outputTree->Branch("genjet_algo3_em",&loops->genjet_algo3_em, "genjet_algo3_em[genjet_algo3_n]/F");
    outputTree->Branch("genjet_algo3_had",&loops->genjet_algo3_had, "genjet_algo3_had[genjet_algo3_n]/F");
    outputTree->Branch("genjet_algo3_inv",&loops->genjet_algo3_inv, "genjet_algo3_inv[genjet_algo3_n]/F");
    outputTree->Branch("genjet_algo3_aux",&loops->genjet_algo3_aux, "genjet_algo3_aux[genjet_algo3_n]/F");
      outputTree->Branch("hc_p4", "TClonesArray",&loops->hc_p4, 32000, 0);
      outputTree->Branch("hc_n",&loops->hc_n, "hc_n/I"); 
      outputTree->Branch("hc_type",&loops->hc_type, "hc_type[hc_n]/I"); 
   outputTree->Branch("hlt1_bit", "std::vector<unsigned short>", &loops->hlt1_bit);
   outputTree->Branch("hlt_path_names_HLT1", "std::vector<std::string>", &loops->hlt_path_names_HLT1);
   outputTree->Branch("hlt2_bit", "std::vector<unsigned short>", &loops->hlt2_bit);
   outputTree->Branch("hlt_path_names_HLT2", "std::vector<std::string>", &loops->hlt_path_names_HLT2);
      outputTree->Branch("hlt_n",&loops->hlt_n, "hlt_n/I"); 
      outputTree->Branch("hlt_p4", "TClonesArray",&loops->hlt_p4, 32000, 0);
   outputTree->Branch("hlt_candpath", "std::vector<std::vector<unsigned short> >", &loops->hlt_candpath);
      outputTree->Branch("ht_25",&loops->ht_25, "ht_25/F"); 
      outputTree->Branch("ht_35",&loops->ht_35, "ht_35/F"); 
      outputTree->Branch("ht_50",&loops->ht_50, "ht_50/F"); 
      outputTree->Branch("ht_nomet25",&loops->ht_nomet25, "ht_nomet25/F"); 
      outputTree->Branch("ht_nomet35",&loops->ht_nomet35, "ht_nomet35/F"); 
      outputTree->Branch("ht_nomet50",&loops->ht_nomet50, "ht_nomet50/F"); 
      outputTree->Branch("ht_trk",&loops->ht_trk, "ht_trk/F"); 
      outputTree->Branch("ht_trkvec","TVector3",&loops->ht_trkvec,32000,0);
      outputTree->Branch("ht_2lpt_n",&loops->ht_2lpt_n, "ht_2lpt_n/I"); 
      outputTree->Branch("ht_2lpt_inds",&loops->ht_2lpt_inds, "ht_2lpt_inds[ht_2lpt_n][2]/I"); 
      outputTree->Branch("ht_4lpt_n",&loops->ht_4lpt_n, "ht_4lpt_n/I"); 
      outputTree->Branch("ht_4lpt_inds",&loops->ht_4lpt_inds, "ht_4lpt_inds[ht_4lpt_n][4]/I"); 
      outputTree->Branch("ht_2lpt25",&loops->ht_2lpt25, "ht_2lpt25[ht_2lpt_n]/F"); 
      outputTree->Branch("ht_2lpt35",&loops->ht_2lpt35, "ht_2lpt35[ht_2lpt_n]/F"); 
      outputTree->Branch("ht_2lpt50",&loops->ht_2lpt50, "ht_2lpt50[ht_2lpt_n]/F"); 
      outputTree->Branch("ht_4lpt25",&loops->ht_4lpt25, "ht_4lpt25[ht_4lpt_n]/F"); 
      outputTree->Branch("ht_4lpt35",&loops->ht_4lpt35, "ht_4lpt35[ht_4lpt_n]/F"); 
      outputTree->Branch("ht_4lpt50",&loops->ht_4lpt50, "ht_4lpt50[ht_4lpt_n]/F"); 
    outputTree->Branch("jet_algo1_n",&loops->jet_algo1_n, "jet_algo1_n/I");
outputTree->Branch("jet_algo1_p4", "TClonesArray",&loops->jet_algo1_p4, 32000, 0);
    outputTree->Branch("jet_algo1_emfrac",&loops->jet_algo1_emfrac, "jet_algo1_emfrac[jet_algo1_n]/F");
    outputTree->Branch("jet_algo1_hadfrac",&loops->jet_algo1_hadfrac, "jet_algo1_hadfrac[jet_algo1_n]/F");
    outputTree->Branch("jet_algo1_ntk",&loops->jet_algo1_ntk, "jet_algo1_ntk[jet_algo1_n]/I");
    outputTree->Branch("jet_algo1_tkind",&loops->jet_algo1_tkind, "jet_algo1_tkind[jet_algo1_n][100]/I");
    outputTree->Branch("jet_algo1_ncalotw",&loops->jet_algo1_ncalotw, "jet_algo1_ncalotw[jet_algo1_n]/I");
    outputTree->Branch("jet_algo1_calotwind",&loops->jet_algo1_calotwind, "jet_algo1_calotwind[jet_algo1_n][100]/I");
    outputTree->Branch("jet_algo2_n",&loops->jet_algo2_n, "jet_algo2_n/I");
outputTree->Branch("jet_algo2_p4", "TClonesArray",&loops->jet_algo2_p4, 32000, 0);
    outputTree->Branch("jet_algo2_emfrac",&loops->jet_algo2_emfrac, "jet_algo2_emfrac[jet_algo2_n]/F");
    outputTree->Branch("jet_algo2_hadfrac",&loops->jet_algo2_hadfrac, "jet_algo2_hadfrac[jet_algo2_n]/F");
    outputTree->Branch("jet_algo2_ntk",&loops->jet_algo2_ntk, "jet_algo2_ntk[jet_algo2_n]/I");
    outputTree->Branch("jet_algo2_tkind",&loops->jet_algo2_tkind, "jet_algo2_tkind[jet_algo2_n][100]/I");
    outputTree->Branch("jet_algo2_ncalotw",&loops->jet_algo2_ncalotw, "jet_algo2_ncalotw[jet_algo2_n]/I");
    outputTree->Branch("jet_algo2_calotwind",&loops->jet_algo2_calotwind, "jet_algo2_calotwind[jet_algo2_n][100]/I");
    outputTree->Branch("jet_algo3_n",&loops->jet_algo3_n, "jet_algo3_n/I");
outputTree->Branch("jet_algo3_p4", "TClonesArray",&loops->jet_algo3_p4, 32000, 0);
    outputTree->Branch("jet_algo3_emfrac",&loops->jet_algo3_emfrac, "jet_algo3_emfrac[jet_algo3_n]/F");
    outputTree->Branch("jet_algo3_hadfrac",&loops->jet_algo3_hadfrac, "jet_algo3_hadfrac[jet_algo3_n]/F");
    outputTree->Branch("jet_algo3_ntk",&loops->jet_algo3_ntk, "jet_algo3_ntk[jet_algo3_n]/I");
    outputTree->Branch("jet_algo3_tkind",&loops->jet_algo3_tkind, "jet_algo3_tkind[jet_algo3_n][100]/I");
    outputTree->Branch("jet_algo3_ncalotw",&loops->jet_algo3_ncalotw, "jet_algo3_ncalotw[jet_algo3_n]/I");
    outputTree->Branch("jet_algo3_calotwind",&loops->jet_algo3_calotwind, "jet_algo3_calotwind[jet_algo3_n][100]/I");
    outputTree->Branch("jet_algoPF1_n",&loops->jet_algoPF1_n, "jet_algoPF1_n/I");
outputTree->Branch("jet_algoPF1_p4", "TClonesArray",&loops->jet_algoPF1_p4, 32000, 0);
    outputTree->Branch("jet_algoPF1_emfrac",&loops->jet_algoPF1_emfrac, "jet_algoPF1_emfrac[jet_algoPF1_n]/F");
    outputTree->Branch("jet_algoPF1_hadfrac",&loops->jet_algoPF1_hadfrac, "jet_algoPF1_hadfrac[jet_algoPF1_n]/F");
    outputTree->Branch("jet_algoPF1_ntk",&loops->jet_algoPF1_ntk, "jet_algoPF1_ntk[jet_algoPF1_n]/I");
    outputTree->Branch("jet_algoPF1_tkind",&loops->jet_algoPF1_tkind, "jet_algoPF1_tkind[jet_algoPF1_n][100]/I");
    outputTree->Branch("jet_algoPF1_ncalotw",&loops->jet_algoPF1_ncalotw, "jet_algoPF1_ncalotw[jet_algoPF1_n]/I");
    outputTree->Branch("jet_algoPF1_calotwind",&loops->jet_algoPF1_calotwind, "jet_algoPF1_calotwind[jet_algoPF1_n][100]/I");
    outputTree->Branch("jet_algoPF2_n",&loops->jet_algoPF2_n, "jet_algoPF2_n/I");
outputTree->Branch("jet_algoPF2_p4", "TClonesArray",&loops->jet_algoPF2_p4, 32000, 0);
    outputTree->Branch("jet_algoPF2_emfrac",&loops->jet_algoPF2_emfrac, "jet_algoPF2_emfrac[jet_algoPF2_n]/F");
    outputTree->Branch("jet_algoPF2_hadfrac",&loops->jet_algoPF2_hadfrac, "jet_algoPF2_hadfrac[jet_algoPF2_n]/F");
    outputTree->Branch("jet_algoPF2_ntk",&loops->jet_algoPF2_ntk, "jet_algoPF2_ntk[jet_algoPF2_n]/I");
    outputTree->Branch("jet_algoPF2_tkind",&loops->jet_algoPF2_tkind, "jet_algoPF2_tkind[jet_algoPF2_n][100]/I");
    outputTree->Branch("jet_algoPF2_ncalotw",&loops->jet_algoPF2_ncalotw, "jet_algoPF2_ncalotw[jet_algoPF2_n]/I");
    outputTree->Branch("jet_algoPF2_calotwind",&loops->jet_algoPF2_calotwind, "jet_algoPF2_calotwind[jet_algoPF2_n][100]/I");
    outputTree->Branch("jet_algoPF3_n",&loops->jet_algoPF3_n, "jet_algoPF3_n/I");
outputTree->Branch("jet_algoPF3_p4", "TClonesArray",&loops->jet_algoPF3_p4, 32000, 0);
    outputTree->Branch("jet_algoPF3_emfrac",&loops->jet_algoPF3_emfrac, "jet_algoPF3_emfrac[jet_algoPF3_n]/F");
    outputTree->Branch("jet_algoPF3_hadfrac",&loops->jet_algoPF3_hadfrac, "jet_algoPF3_hadfrac[jet_algoPF3_n]/F");
    outputTree->Branch("jet_algoPF3_ntk",&loops->jet_algoPF3_ntk, "jet_algoPF3_ntk[jet_algoPF3_n]/I");
    outputTree->Branch("jet_algoPF3_tkind",&loops->jet_algoPF3_tkind, "jet_algoPF3_tkind[jet_algoPF3_n][100]/I");
    outputTree->Branch("jet_algoPF3_ncalotw",&loops->jet_algoPF3_ncalotw, "jet_algoPF3_ncalotw[jet_algoPF3_n]/I");
    outputTree->Branch("jet_algoPF3_calotwind",&loops->jet_algoPF3_calotwind, "jet_algoPF3_calotwind[jet_algoPF3_n][100]/I");
      outputTree->Branch("l1emiso_n",&loops->l1emiso_n,"l1emiso_n/I"); 
      outputTree->Branch("l1emiso_eta",&loops->l1emiso_eta,"l1emiso_eta[l1emiso_n]/F"); 
      outputTree->Branch("l1emiso_et",&loops->l1emiso_et,"l1emiso_et[l1emiso_n]/F"); 
      outputTree->Branch("l1emiso_phi",&loops->l1emiso_phi,"l1emiso_phi[l1emiso_n]/F"); 
      outputTree->Branch("l1emnoniso_n",&loops->l1emnoniso_n,"l1emnoniso_n/I"); 
      outputTree->Branch("l1emnoniso_et",&loops->l1emnoniso_et,"l1emnoniso_et[l1emnoniso_n]/F"); 
      outputTree->Branch("l1emnoniso_eta",&loops->l1emnoniso_eta,"l1emnoniso_eta[l1emnoniso_n]/F"); 
      outputTree->Branch("l1emnoniso_phi",&loops->l1emnoniso_phi,"l1emnoniso_phi[l1emnoniso_n]/F"); 
      outputTree->Branch("l1cenjet_n",&loops->l1cenjet_n,"l1cenjet_n/I"); 
      outputTree->Branch("l1cenjet_et",&loops->l1cenjet_et,"l1cenjet_et[l1cenjet_n]/F"); 
      outputTree->Branch("l1cenjet_eta",&loops->l1cenjet_eta,"l1cenjet_eta[l1cenjet_n]/F"); 
      outputTree->Branch("l1cenjet_phi",&loops->l1cenjet_phi,"l1cenjet_phi[l1cenjet_n]/F"); 
      outputTree->Branch("l1forjet_n",&loops->l1forjet_n,"l1forjet_n/I"); 
      outputTree->Branch("l1forjet_et",&loops->l1forjet_et,"l1forjet_et[l1forjet_n]/F"); 
      outputTree->Branch("l1forjet_eta",&loops->l1forjet_eta,"l1forjet_eta[l1forjet_n]/F"); 
      outputTree->Branch("l1forjet_phi",&loops->l1forjet_phi,"l1forjet_phi[l1forjet_n]/F"); 
      outputTree->Branch("l1taujet_n",&loops->l1taujet_n,"l1taujet_n/I"); 
      outputTree->Branch("l1taujet_et",&loops->l1taujet_et,"l1taujet_et[l1taujet_n]/F"); 
      outputTree->Branch("l1taujet_eta",&loops->l1taujet_eta,"l1taujet_eta[l1taujet_n]/F"); 
      outputTree->Branch("l1taujet_phi",&loops->l1taujet_phi,"l1taujet_phi[l1taujet_n]/F"); 
      outputTree->Branch("l1met_et",&loops->l1met_et,"l1met_et/F"); 
      outputTree->Branch("l1met_phi",&loops->l1met_phi,"l1met_phi/F"); 
      outputTree->Branch("l1mu_n",&loops->l1mu_n,"l1mu_n/I"); 
      outputTree->Branch("l1mu_et",&loops->l1mu_et,"l1mu_et[l1mu_n]/F"); 
      outputTree->Branch("l1mu_eta",&loops->l1mu_eta,"l1mu_eta[l1mu_n]/F"); 
      outputTree->Branch("l1mu_phi",&loops->l1mu_phi,"l1mu_phi[l1mu_n]/F"); 
   outputTree->Branch("l1_labels", "std::map<std::string, int>", &loops->l1_labels);
   outputTree->Branch("l1bits_phy", "std::vector<int>", &loops->l1bits_phy);
   outputTree->Branch("l1bits_tec", "std::vector<int>", &loops->l1bits_tec);
      outputTree->Branch("lpt_n",&loops->lpt_n, "lpt_n/I"); 
      outputTree->Branch("lpt_emu_n",&loops->lpt_emu_n, "lpt_emu_n/I"); 
      outputTree->Branch("lpt_mu_n",&loops->lpt_mu_n, "lpt_mu_n/I"); 
      outputTree->Branch("lpt_el_n",&loops->lpt_el_n, "lpt_el_n/I"); 
      outputTree->Branch("lpt_pho_n",&loops->lpt_pho_n, "lpt_pho_n/I"); 
      outputTree->Branch("lpt_pdgid",&loops->lpt_pdgid, "lpt_pdgid[lpt_n]/I"); 
      outputTree->Branch("lpt_ind",&loops->lpt_ind, "lpt_ind[lpt_n]/I"); 
      outputTree->Branch("lpt_duplicate",&loops->lpt_duplicate, "lpt_duplicate[lpt_n]/I"); 
      outputTree->Branch("lpt_p4", "TClonesArray",&loops->lpt_p4, 32000, 0);
      outputTree->Branch("lpt_indgen",&loops->lpt_indgen, "lpt_indgen[lpt_n]/I"); 
      outputTree->Branch("lpt_drmatch",&loops->lpt_drmatch, "lpt_drmatch[lpt_n]/F"); 
      outputTree->Branch("met_met",&loops->met_met, "met_met/F"); 
      outputTree->Branch("met_phi",&loops->met_phi, "met_phi/F"); 
      outputTree->Branch("met_met_nocalo",&loops->met_met_nocalo, "met_met_nocalo/F"); 
      outputTree->Branch("met_phi_nocalo",&loops->met_phi_nocalo, "met_phi_nocalo/F"); 
      outputTree->Branch("met_met_crossed",&loops->met_met_crossed, "met_met_crossed/F"); 
      outputTree->Branch("met_phi_crossed",&loops->met_phi_crossed, "met_phi_crossed/F"); 
      outputTree->Branch("met_met_s9",&loops->met_met_s9, "met_met_s9/F"); 
      outputTree->Branch("met_phi_s9",&loops->met_phi_s9, "met_phi_s9/F"); 
      outputTree->Branch("met_met_mip",&loops->met_met_mip, "met_met_mip/F"); 
      outputTree->Branch("met_phi_mip",&loops->met_phi_mip, "met_phi_mip/F"); 
      outputTree->Branch("met_met_jet",&loops->met_met_jet, "met_met_jet/F"); 
      outputTree->Branch("met_phi_jet",&loops->met_phi_jet, "met_phi_jet/F"); 
      outputTree->Branch("met_tcmet",&loops->met_tcmet, "met_tcmet/F"); 
      outputTree->Branch("met_phi_tcmet",&loops->met_phi_tcmet, "met_phi_tcmet"); 
      outputTree->Branch("met_pfmet",&loops->met_pfmet, "met_pfmet/F"); 
      outputTree->Branch("met_phi_pfmet",&loops->met_phi_pfmet, "met_phi_pfmet"); 
      outputTree->Branch("mu_glo_n",&loops->mu_glo_n, "mu_glo_n/I"); 
      outputTree->Branch("mu_glo_p4", "TClonesArray",&loops->mu_glo_p4, 32000, 0);
      outputTree->Branch("mu_glo_momvtx", "TClonesArray",&loops->mu_glo_momvtx, 32000, 0);
      outputTree->Branch("mu_glo_posvtx", "TClonesArray",&loops->mu_glo_posvtx, 32000, 0);
      outputTree->Branch("mu_glo_posecal", "TClonesArray",&loops->mu_glo_posecal, 32000, 0);
      outputTree->Branch("mu_glo_poshcal", "TClonesArray",&loops->mu_glo_poshcal, 32000, 0);
      outputTree->Branch("mu_glo_nmatches",&loops->mu_glo_nmatches, "mu_glo_nmatches[mu_glo_n]/I"); 
      outputTree->Branch("mu_glo_em",&loops->mu_glo_em, "mu_glo_em[mu_glo_n]/F"); 
      outputTree->Branch("mu_glo_had",&loops->mu_glo_had, "mu_glo_had[mu_glo_n]/F"); 
      outputTree->Branch("mu_glo_ho",&loops->mu_glo_ho, "mu_glo_ho[mu_glo_n]/F"); 
      outputTree->Branch("mu_glo_emS9",&loops->mu_glo_emS9, "mu_glo_emS9[mu_glo_n]/F"); 
      outputTree->Branch("mu_glo_hadS9",&loops->mu_glo_hadS9, "mu_glo_hadS9[mu_glo_n]/F"); 
      outputTree->Branch("mu_glo_hoS9",&loops->mu_glo_hoS9, "mu_glo_hoS9[mu_glo_n]/F"); 
      outputTree->Branch("mu_glo_chi2",&loops->mu_glo_chi2, "mu_glo_chi2[mu_glo_n]/F"); 
      outputTree->Branch("mu_glo_dof",&loops->mu_glo_dof, "mu_glo_dof[mu_glo_n]/F"); 
      outputTree->Branch("mu_glo_tkind",&loops->mu_glo_tkind,"mu_glo_tkind[mu_glo_n]/I"); 
      outputTree->Branch("mu_glo_staind",&loops->mu_glo_staind,"mu_glo_staind[mu_glo_n]/I"); 
      outputTree->Branch("mu_glo_z0",&loops->mu_glo_z0, "mu_glo_z0[mu_glo_n]/F"); 
      outputTree->Branch("mu_glo_d0",&loops->mu_glo_d0, "mu_glo_d0[mu_glo_n]/F"); 
      outputTree->Branch("mu_glo_z0err",&loops->mu_glo_z0err, "mu_glo__z0err[mu_glo_n]/F"); 
      outputTree->Branch("mu_glo_d0err",&loops->mu_glo_d0err, "mu_glo_d0err[mu_glo_n]/F"); 
      outputTree->Branch("mu_glo_charge",&loops->mu_glo_charge, "mu_glo_charge[mu_glo_n]/I"); 
      outputTree->Branch("mu_glo_losthits",&loops->mu_glo_losthits, "mu_glo_losthits[mu_glo_n]/I"); 
      outputTree->Branch("mu_glo_validhits",&loops->mu_glo_validhits, "mu_glo_validhits[mu_glo_n]/I"); 
      outputTree->Branch("mu_glo_type",&loops->mu_glo_type, "mu_glo_type[mu_glo_n]/I"); 
      outputTree->Branch("mu_glo_iso",&loops->mu_glo_iso, "mu_glo_iso[mu_glo_n]/F"); 
      outputTree->Branch("pho_n",&loops->pho_n, "pho_n/I"); 
      outputTree->Branch("pho_isEB",&loops->pho_isEB,"pho_isEB[pho_n]/I"); 
      outputTree->Branch("pho_isEE",&loops->pho_isEE,"pho_isEE[pho_n]/I"); 
      outputTree->Branch("pho_isEBGap",&loops->pho_isEBGap,"pho_isEBGap[pho_n]/I"); 
      outputTree->Branch("pho_isEEGap",&loops->pho_isEEGap,"pho_isEEGap[pho_n]/I"); 
      outputTree->Branch("pho_isEBEEGap",&loops->pho_isEBEEGap,"pho_isEBEEGap[pho_n]/I"); 
      outputTree->Branch("pho_see",&loops->pho_see,"pho_see[pho_n]/F"); 
      outputTree->Branch("pho_sieie",&loops->pho_sieie,"pho_sieie[pho_n]/F"); 
      outputTree->Branch("pho_e1x5",&loops->pho_e1x5,"pho_e1x5[pho_n]/F"); 
      outputTree->Branch("pho_e2x5",&loops->pho_e2x5,"pho_e2x5[pho_n]/F"); 
      outputTree->Branch("pho_e3x3",&loops->pho_e3x3,"pho_e3x3[pho_n]/F"); 
      outputTree->Branch("pho_e5x5",&loops->pho_e5x5,"pho_e5x5[pho_n]/F"); 
      outputTree->Branch("pho_emaxxtal",&loops->pho_emaxxtal,"pho_emaxxtal[pho_n]/F"); 
      outputTree->Branch("pho_hoe",&loops->pho_hoe,"pho_hoe[pho_n]/F"); 
      outputTree->Branch("pho_h1oe",&loops->pho_h1oe,"pho_h1oe[pho_n]/F"); 
      outputTree->Branch("pho_h2oe",&loops->pho_h2oe,"pho_h2oe[pho_n]/F"); 
      outputTree->Branch("pho_r1x5",&loops->pho_r1x5,"pho_r1x5[pho_n]/F"); 
      outputTree->Branch("pho_r2x5",&loops->pho_r2x5,"pho_r2x5[pho_n]/F"); 
      outputTree->Branch("pho_r9",&loops->pho_r9,"pho_r9[pho_n]/F"); 
      outputTree->Branch("pho_ecalsumetconedr04",&loops->pho_ecalsumetconedr04,"pho_ecalsumetconedr04[pho_n]/F"); 
      outputTree->Branch("pho_hcalsumetconedr04",&loops->pho_hcalsumetconedr04,"pho_hcalsumetconedr04[pho_n]/F"); 
      outputTree->Branch("pho_hcal1sumetconedr04",&loops->pho_hcal1sumetconedr04,"pho_hcal1sumetconedr04[pho_n]/F"); 
      outputTree->Branch("pho_hcal2sumetconedr04",&loops->pho_hcal2sumetconedr04,"pho_hcal2sumetconedr04[pho_n]/F"); 
      outputTree->Branch("pho_trksumptsolidconedr04",&loops->pho_trksumptsolidconedr04,"pho_trksumptsolidconedr04[pho_n]/F"); 
      outputTree->Branch("pho_trksumpthollowconedr04",&loops->pho_trksumpthollowconedr04,"pho_trksumpthollowconedr04[pho_n]/F"); 
      outputTree->Branch("pho_ntrksolidconedr04",&loops->pho_ntrksolidconedr04,"pho_ntrksolidconedr04[pho_n]/F"); 
      outputTree->Branch("pho_ntrkhollowconedr04",&loops->pho_ntrkhollowconedr04,"pho_ntrkhollowconedr04[pho_n]/F"); 
      outputTree->Branch("pho_ecalsumetconedr03",&loops->pho_ecalsumetconedr03,"pho_ecalsumetconedr03[pho_n]/F"); 
      outputTree->Branch("pho_hcalsumetconedr03",&loops->pho_hcalsumetconedr03,"pho_hcalsumetconedr03[pho_n]/F"); 
      outputTree->Branch("pho_hcal1sumetconedr03",&loops->pho_hcal1sumetconedr03,"pho_hcal1sumetconedr03[pho_n]/F"); 
      outputTree->Branch("pho_hcal2sumetconedr03",&loops->pho_hcal2sumetconedr03,"pho_hcal2sumetconedr03[pho_n]/F"); 
      outputTree->Branch("pho_trksumptsolidconedr03",&loops->pho_trksumptsolidconedr03,"pho_trksumptsolidconedr03[pho_n]/F"); 
      outputTree->Branch("pho_trksumpthollowconedr03",&loops->pho_trksumpthollowconedr03,"pho_trksumpthollowconedr03[pho_n]/F"); 
      outputTree->Branch("pho_ntrksolidconedr03",&loops->pho_ntrksolidconedr03,"pho_ntrksolidconedr03[pho_n]/F"); 
      outputTree->Branch("pho_ntrkhollowconedr03",&loops->pho_ntrkhollowconedr03,"pho_ntrkhollowconedr03[pho_n]/F"); 
      outputTree->Branch("pho_p4", "TClonesArray",&loops->pho_p4, 32000, 0);
      outputTree->Branch("pho_calopos", "TClonesArray",&loops->pho_calopos, 32000, 0);
      outputTree->Branch("pho_barrel",&loops->pho_barrel, "pho_barrel[pho_n]/I"); 
      outputTree->Branch("pho_scind",&loops->pho_scind, "pho_scind[pho_n]/I"); 
      outputTree->Branch("pho_haspixseed",&loops->pho_haspixseed,"pho_haspixseed[pho_n]/I"); 
      outputTree->Branch("pho_hasconvtks",&loops->pho_hasconvtks,"pho_hasconvtks[pho_n]/I"); 
      outputTree->Branch("pho_nconv",&loops->pho_nconv,"pho_nconv[pho_n]/I"); 
      outputTree->Branch("pho_conv_ntracks",&loops->pho_conv_ntracks,"pho_conv_ntracks[pho_n]/I"); 
      outputTree->Branch("pho_conv_pairinvmass",&loops->pho_conv_pairinvmass,"pho_conv_pairinvmass[pho_n]/F"); 
      outputTree->Branch("pho_conv_paircotthetasep",&loops->pho_conv_paircotthetasep,"pho_conv_paircotthetasep[pho_n]/F"); 
      outputTree->Branch("pho_conv_eoverp",&loops->pho_conv_eoverp,"pho_conv_eoverp[pho_n]/F"); 
      outputTree->Branch("pho_conv_zofprimvtxfromtrks",&loops->pho_conv_zofprimvtxfromtrks,"pho_conv_zofprimvtxfromtrks[pho_n]/F"); 
      outputTree->Branch("pho_conv_distofminapproach",&loops->pho_conv_distofminapproach,"pho_conv_distofminapproach[pho_n]/F"); 
      outputTree->Branch("pho_conv_dphitrksatvtx",&loops->pho_conv_dphitrksatvtx,"pho_conv_dphitrksatvtx[pho_n]/F"); 
      outputTree->Branch("pho_conv_dphitrksatecal",&loops->pho_conv_dphitrksatecal,"pho_conv_dphitrksatecal[pho_n]/F"); 
      outputTree->Branch("pho_conv_detatrksatecal",&loops->pho_conv_detatrksatecal,"pho_conv_detatrksatecal[pho_n]/F"); 
      outputTree->Branch("pho_conv_tk1_d0",&loops->pho_conv_tk1_d0,"pho_conv_tk1_d0[pho_n]/F"); 
      outputTree->Branch("pho_conv_tk1_pout",&loops->pho_conv_tk1_pout,"pho_conv_tk1_pout[pho_n]/F"); 
      outputTree->Branch("pho_conv_tk1_pin",&loops->pho_conv_tk1_pin,"pho_conv_tk1_pin[pho_n]/F"); 
      outputTree->Branch("pho_conv_tk2_d0",&loops->pho_conv_tk2_d0,"pho_conv_tk2_d0[pho_n]/F"); 
      outputTree->Branch("pho_conv_tk2_pout",&loops->pho_conv_tk2_pout,"pho_conv_tk2_pout[pho_n]/F"); 
      outputTree->Branch("pho_conv_tk2_pin",&loops->pho_conv_tk2_pin,"pho_conv_tk2_pin[pho_n]/F"); 
      outputTree->Branch("pho_conv_tk1_dz",&loops->pho_conv_tk1_dz,"pho_conv_tk1_dz[pho_n]/F"); 
      outputTree->Branch("pho_conv_tk2_dz",&loops->pho_conv_tk2_dz,"pho_conv_tk2_dz[pho_n]/F"); 
      outputTree->Branch("pho_conv_tk1_dzerr",&loops->pho_conv_tk1_dzerr,"pho_conv_tk1_dzerr[pho_n]/F"); 
      outputTree->Branch("pho_conv_tk2_dzerr",&loops->pho_conv_tk2_dzerr,"pho_conv_tk2_dzerr[pho_n]/F"); 
      outputTree->Branch("pho_conv_tk1_nh",&loops->pho_conv_tk1_nh,"pho_conv_tk1_nh[pho_n]/I"); 
      outputTree->Branch("pho_conv_tk2_nh",&loops->pho_conv_tk2_nh,"pho_conv_tk2_nh[pho_n]/I"); 
      outputTree->Branch("pho_conv_chi2",&loops->pho_conv_chi2,"pho_conv_chi2[pho_n]/F"); 
      outputTree->Branch("pho_conv_chi2_probability",&loops->pho_conv_chi2_probability,"pho_conv_chi2_probability[pho_n]/F"); 
      outputTree->Branch("pho_conv_ch1ch2",&loops->pho_conv_ch1ch2,"pho_conv_ch1ch2[pho_n]/I"); 
      outputTree->Branch("pho_conv_validvtx",&loops->pho_conv_validvtx,"pho_conv_validvtx[pho_n]/I"); 
      outputTree->Branch("pho_conv_MVALikelihood",&loops->pho_conv_MVALikelihood,"pho_conv_MVALikelihood[pho_n]/I"); 
      outputTree->Branch("pho_conv_vtx", "TClonesArray",&loops->pho_conv_vtx, 32000, 0);
      outputTree->Branch("pho_conv_pair_momentum", "TClonesArray",&loops->pho_conv_pair_momentum, 32000, 0);
      outputTree->Branch("pho_conv_refitted_momentum", "TClonesArray",&loops->pho_conv_refitted_momentum, 32000, 0);
      outputTree->Branch("pho_conv_vertexcorrected_p4", "TClonesArray",&loops->pho_conv_vertexcorrected_p4, 32000, 0);
      outputTree->Branch("lptgeninfo_n",&loops->lptgeninfo_n, "lptgeninfo_n/I"); 
      outputTree->Branch("lptgen_n",&loops->lptgen_n, "lptgen_n/I"); 
      outputTree->Branch("lptgeninfo_p4", "TClonesArray",&loops->lptgeninfo_p4, 32000, 0);
      outputTree->Branch("lptgen_p4", "TClonesArray",&loops->lptgen_p4, 32000, 0);
      outputTree->Branch("lptgen_befrad_p4", "TClonesArray",&loops->lptgen_befrad_p4, 32000, 0);
      outputTree->Branch("lptgeninfo_status",&loops->lptgeninfo_status, "lptgeninfo_status[lptgeninfo_n]/I"); 
      outputTree->Branch("lptgeninfo_pdgid",&loops->lptgeninfo_pdgid, "lptgeninfo_pdgid[lptgeninfo_n]/I"); 
      outputTree->Branch("lptgeninfo_mother",&loops->lptgeninfo_mother, "lptgeninfo_mother[lptgeninfo_n]/I"); 
      outputTree->Branch("lptgen_status",&loops->lptgen_status,           "lptgen_status[lptgen_n]/I"     ); 
      outputTree->Branch("lptgen_pdgid",&loops->lptgen_pdgid,             "lptgen_pdgid[lptgen_n]/I"      ); 
      outputTree->Branch("lptgen_mother",&loops->lptgen_mother,           "lptgen_mother[lptgen_n]/I"     ); 
      outputTree->Branch("lptgen_motherpdgid",&loops->lptgen_motherpdgid, "lptgen_motherpdgid[lptgen_n]/I"); 
      outputTree->Branch("lptgen_indrec",&loops->lptgen_indrec,           "lptgen_indrec[lptgen_n]/I"); 
      outputTree->Branch("lptgen_indrecel",&loops->lptgen_indrecel,       "lptgen_indrecel[lptgen_n]/I"); 
      outputTree->Branch("lptgen_indrecph",&loops->lptgen_indrecph,       "lptgen_indrecph[lptgen_n]/I"); 
      outputTree->Branch("lptgen_indrecmu",&loops->lptgen_indrecmu,       "lptgen_indrecmu[lptgen_n]/I"); 
      outputTree->Branch("lptgen_drmatch",&loops->lptgen_drmatch,         "lptgen_drmatch[lptgen_n]/F"); 
      outputTree->Branch("lptgen_drmatchel",&loops->lptgen_drmatchel,     "lptgen_drmatchel[lptgen_n]/F"); 
      outputTree->Branch("lptgen_drmatchmu",&loops->lptgen_drmatchmu,     "lptgen_drmatchmu[lptgen_n]/F"); 
      outputTree->Branch("lptgen_drmatchph",&loops->lptgen_drmatchph,     "lptgen_drmatchph[lptgen_n]/F"); 
      outputTree->Branch("lptgen_indinfo",&loops->lptgen_indinfo,         "lptgen_indinfo[lptgen_n]/I"    ); 
      outputTree->Branch("lptgen_historycode",&loops->lptgen_historycode, "lptgen_historycode[lptgen_n]/I"); 
      outputTree->Branch("simtrk_n",&loops->simtrk_n, "simtrk_n/I"); 
      outputTree->Branch("simtrk_p4", "TClonesArray",&loops->simtrk_p4, 32000, 0);
      outputTree->Branch("simtrk_vtx", "TClonesArray",&loops->simtrk_vtx, 32000, 0);
      outputTree->Branch("simtrk_pdgid",&loops->simtrk_pdgid, "simtrk_pdgid[simtrk_n]/I"); 
      outputTree->Branch("simtrk_trkid",&loops->simtrk_trkid, "simtrk_trkid[simtrk_n]/I"); 
      outputTree->Branch("simtrk_mothertrkid",&loops->simtrk_mothertrkid, "simtrk_mothertrkid[simtrk_n]/I"); 
      outputTree->Branch("simvtx", "TClonesArray",&loops->simvtx, 32000, 0);
      outputTree->Branch("simhit_n",&loops->simhit_n, "simhit_n/I"); 
      outputTree->Branch("simhit_xyz", "TClonesArray",&loops->simhit_xyz, 32000, 0);
      outputTree->Branch("simhit_pabs",&loops->simhit_pabs, "simhit_pabs[simhit_n]/F"); 
      outputTree->Branch("simhit_eloss",&loops->simhit_eloss, "simhit_eloss[simhit_n]/F"); 
      outputTree->Branch("simhit_subdet",&loops->simhit_subdet, "simhit_subdet[simhit_n]/I"); 
      outputTree->Branch("simhit_pdgid",&loops->simhit_pdgid, "simhit_pdgid[simhit_n]/I"); 
      outputTree->Branch("simhit_trkid",&loops->simhit_trkid, "simhit_trkid[simhit_n]/I"); 
      outputTree->Branch("simhit_simtrkind",&loops->simhit_simtrkind, "simhit_simtrkind[simhit_n]/I"); 
      outputTree->Branch("tk_n",&loops->tk_n, "tk_n/I"); 
      outputTree->Branch("tk_p4", "TClonesArray",&loops->tk_p4, 32000, 0);
      outputTree->Branch("tk_vtx_pos", "TClonesArray",&loops->tk_vtx_pos, 32000, 0);
      outputTree->Branch("tk_nhits",&loops->tk_nhits, "tk_nhits[tk_n]/I"); 
      outputTree->Branch("tk_charge",&loops->tk_charge, "tk_charge[tk_n]/I"); 
      outputTree->Branch("tk_nlosthit",&loops->tk_nlosthit,"tk_nlosthit[tk_n]/I" ); 
      outputTree->Branch("tk_tpind",&loops->tk_tpind,"tk_tpind[tk_n]/I" ); 
      outputTree->Branch("tk_chi2",&loops->tk_chi2,"tk_chi2[tk_n]/F" ); 
      outputTree->Branch("tk_dof",&loops->tk_dof, "tk_dof[tk_n]/F"); 
      outputTree->Branch("tk_d0",&loops->tk_d0, "tk_d0[tk_n]/F"); 
      outputTree->Branch("tk_dz",&loops->tk_dz, "tk_dz[tk_n]/F"); 
      outputTree->Branch("tk_qoverperr",&loops->tk_qoverperr,"tk_qoverperr[tk_n]/F" ); 
      outputTree->Branch("tk_pterr",&loops->tk_pterr,"tk_pterr[tk_n]/F" ); 
      outputTree->Branch("tk_etaerr",&loops->tk_etaerr,"tk_etaerr[tk_n]/F" ); 
      outputTree->Branch("tk_phierr",&loops->tk_phierr,"tk_phierr[tk_n]/F" ); 
      outputTree->Branch("tk_d0err",&loops->tk_d0err,"tk_d0err[tk_n]/F" ); 
      outputTree->Branch("tk_dzerr",&loops->tk_dzerr, "tk_dzerr[tk_n]/F"); 
      outputTree->Branch("tk_hp_nvalid",&loops->tk_hp_nvalid, "tk_hp_nvalid[tk_n]/I"); 
      outputTree->Branch("tk_hp_nlost",&loops->tk_hp_nlost, "tk_hp_nlost[tk_n]/I"); 
      outputTree->Branch("tk_hp_nvalidpix",&loops->tk_hp_nvalidpix, "tk_hp_nvalidpix[tk_n]/I"); 
      outputTree->Branch("tk_hp_expin",&loops->tk_hp_expin, "tk_hp_expin[tk_n]/I"); 
      outputTree->Branch("tk_hp_expout",&loops->tk_hp_expout, "tk_hp_expout[tk_n]/I"); 
      outputTree->Branch("tk_quality",&loops->tk_quality, "tk_quality[tk_n]/I"); 
      outputTree->Branch("tk_algo",&loops->tk_algo, "tk_algo[tk_n]/I"); 
      outputTree->Branch("tp_n",&loops->tp_n, "tp_n/I"); 
      outputTree->Branch("tp_p4", "TClonesArray",&loops->tp_p4, 32000, 0);
      outputTree->Branch("tp_vtx", "TClonesArray",&loops->tp_vtx, 32000, 0);
      outputTree->Branch("tv_xyz", "TClonesArray",&loops->tv_xyz, 32000, 0);
      outputTree->Branch("tp_pdgid",&loops->tp_pdgid, "tp_pdgid[tp_n]/I"); 
      outputTree->Branch("tp_motherid",&loops->tp_motherid, "tp_motherid[tp_n]/I"); 
      outputTree->Branch("tp_charge",&loops->tp_charge, "tp_charge[tp_n]/I"); 
      outputTree->Branch("tp_tkind",&loops->tp_tkind, "tp_tkind[tp_n]/I"); 
      outputTree->Branch("tp_genind",&loops->tp_genind, "tp_genind[tp_n]/I"); 
      outputTree->Branch("tp_d0",&loops->tp_d0, "tp_d0[tp_n]/D"); 
      outputTree->Branch("tp_dz",&loops->tp_dz, "tp_dz[tp_n]/D"); 
      outputTree->Branch("bs_xyz", "TClonesArray",&loops->bs_xyz, 32000, 0);
      outputTree->Branch("bs_sigmaZ",&loops->bs_sigmaZ, "bs_sigmaZ/F"); 
      outputTree->Branch("bs_x0Error",&loops->bs_x0Error, "bs_x0Error/F"); 
      outputTree->Branch("bs_y0Error",&loops->bs_y0Error, "bs_y0Error/F"); 
      outputTree->Branch("bs_z0Error",&loops->bs_z0Error, "bs_z0Error/F"); 
      outputTree->Branch("bs_sigmaZ0Error",&loops->bs_sigmaZ0Error, "bs_sigmaZ0Error/F"); 
    outputTree->Branch("vtx_n",&loops->vtx_n, "vtx_n/I");
outputTree->Branch("vtx_xyz", "TClonesArray",&loops->vtx_xyz, 32000, 0);
outputTree->Branch("vtx_dxdydz", "TClonesArray",&loops->vtx_dxdydz, 32000, 0);
outputTree->Branch("vtx_vectorp3", "TClonesArray",&loops->vtx_vectorp3, 32000, 0);
    outputTree->Branch("vtx_x2dof",&loops->vtx_x2dof, "vtx_x2dof[vtx_n]/F");
    outputTree->Branch("vtx_ndof",&loops->vtx_ndof, "vtx_ndof[vtx_n]/F");
    outputTree->Branch("vtx_scalarpt",&loops->vtx_scalarpt, "vtx_scalarpt[vtx_n]/F");
    outputTree->Branch("vtx_ntks",&loops->vtx_ntks, "vtx_ntks[vtx_n]/I");
    outputTree->Branch("vtx_tkind",&loops->vtx_tkind, "vtx_tkind[vtx_n][200]/I");
    outputTree->Branch("vtx_tkweight",&loops->vtx_tkweight, "vtx_tkweight[vtx_n][200]/F");
      outputTree->Branch("bs_std_xyz", "TClonesArray",&loops->bs_std_xyz, 32000, 0);
      outputTree->Branch("bs_std_sigmaZ",&loops->bs_std_sigmaZ, "bs_sigmaZ/F"); 
      outputTree->Branch("bs_std_x0Error",&loops->bs_std_x0Error, "bs_x0Error/F"); 
      outputTree->Branch("bs_std_y0Error",&loops->bs_std_y0Error, "bs_y0Error/F"); 
      outputTree->Branch("bs_std_z0Error",&loops->bs_std_z0Error, "bs_z0Error/F"); 
      outputTree->Branch("bs_std_sigmaZ0Error",&loops->bs_std_sigmaZ0Error, "bs_sigmaZ0Error/F"); 
    outputTree->Branch("vtx_std_n",&loops->vtx_std_n, "vtx_std_n/I");
outputTree->Branch("vtx_std_xyz", "TClonesArray",&loops->vtx_std_xyz, 32000, 0);
outputTree->Branch("vtx_std_dxdydz", "TClonesArray",&loops->vtx_std_dxdydz, 32000, 0);
outputTree->Branch("vtx_std_vectorp3", "TClonesArray",&loops->vtx_std_vectorp3, 32000, 0);
    outputTree->Branch("vtx_std_x2dof",&loops->vtx_std_x2dof, "vtx_std_x2dof[vtx_std_n]/F");
    outputTree->Branch("vtx_std_ndof",&loops->vtx_std_ndof, "vtx_std_ndof[vtx_std_n]/F");
    outputTree->Branch("vtx_std_scalarpt",&loops->vtx_std_scalarpt, "vtx_std_scalarpt[vtx_std_n]/F");
    outputTree->Branch("vtx_std_ntks",&loops->vtx_std_ntks, "vtx_std_ntks[vtx_std_n]/I");
    outputTree->Branch("vtx_std_tkind",&loops->vtx_std_tkind, "vtx_std_tkind[vtx_std_n][200]/I");
    outputTree->Branch("vtx_std_tkweight",&loops->vtx_std_tkweight, "vtx_std_tkweight[vtx_std_n][200]/F");
